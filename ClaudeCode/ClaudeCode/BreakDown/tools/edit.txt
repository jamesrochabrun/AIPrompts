# Edit Tool

## Overview
Performs exact string replacements in files.

## Purpose
Edit existing files by replacing old strings with new strings.

## Parameters

### Required
- **file_path**: The absolute path to the file to modify
- **old_string**: The text to replace
- **new_string**: The text to replace it with (must be different from old_string)

### Optional
- **replace_all**: Replace all occurrences of old_string (default: false)

## Prerequisites

### Must Read File First
You MUST use your Read tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.

## Indentation Handling

### Critical Rule
When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix.

### Line Number Prefix Format
```
spaces + line number + tab + [actual file content]
```

Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.

## Uniqueness Requirement

### String Must Be Unique
The edit will FAIL if `old_string` is not unique in the file.

### Solutions if Not Unique
1. Provide a larger string with more surrounding context to make it unique
2. Use `replace_all: true` to change every instance

## Usage Guidelines

### Emoji Policy
Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.

### Prefer Editing Over Creating
ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.

## replace_all Parameter

### When to Use
- Renaming variables across entire file
- Replacing all instances of a string
- Global find-and-replace operations

### Example
```
Edit tool:
  file_path: "/path/to/file.ts"
  old_string: "oldVariableName"
  new_string: "newVariableName"
  replace_all: true
```

## Examples

### Example 1: Single Replacement
```
Edit tool:
  file_path: "/project/src/auth.ts"
  old_string: "function login() {\n  return null;\n}"
  new_string: "function login() {\n  return authenticateUser();\n}"
```

### Example 2: With Context for Uniqueness
```
Edit tool:
  file_path: "/project/src/utils.ts"
  old_string: "export function formatDate(date: Date) {\n  return date.toString();\n}"
  new_string: "export function formatDate(date: Date) {\n  return date.toISOString().split('T')[0];\n}"
```

### Example 3: Replace All
```
Edit tool:
  file_path: "/project/src/config.ts"
  old_string: "process.env.API_URL"
  new_string: "process.env.API_ENDPOINT"
  replace_all: true
```

### Example 4: Preserving Indentation
```
# Read tool output shows:
   42	  if (user) {
   43	    console.log(user.name);
   44	  }

# Correct edit (preserves indentation after tab):
old_string: "  if (user) {\n    console.log(user.name);\n  }"
new_string: "  if (user) {\n    console.log(user.email);\n  }"
```

## Common Mistakes

### Including Line Numbers
```
# Wrong - includes line number prefix
old_string: "   42	  if (user) {"

# Correct - only actual file content
old_string: "  if (user) {"
```

### Not Enough Context
```
# Wrong - too generic, might not be unique
old_string: "return null;"

# Correct - includes surrounding context
old_string: "function login() {\n  return null;\n}"
```

## Related
- read.txt
- write.txt
- file_creation_policy.txt
